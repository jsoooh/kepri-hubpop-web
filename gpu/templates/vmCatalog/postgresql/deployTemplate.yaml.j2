heat_template_version: '2018-08-31'

description: single postgresql volume template

parameters:
  api_end_point:
    type: string
  image:
    type: string
    default: CentOS-7-x86_64-Heat-1907-Postgresql.qcow2
  flavor:
    type: string
  availability_zone:
    type: string
  key_name:
    type: string
  security_group:
    type: string
  provider_net:
    type: string
  provider_subnet:
    type: string
  service_port:
    type: string
  postgres_password:
    type: string
{% if createUser %}
  create_user_id:
    type: string
  create_user_password:
    type: string
  create_db_name:
    type: string
{% endif %}
{% if volumeUse %}
  volume_type:
    type: string
  volume_size:
    type: string
  volume_mount_point:
    type: string
    default: /dev/vdb
  volume_format_type:
    type: string
    default: xfs
  volume_mount_path:
    type: string
    default: /mnt/data
{% endif %}

resources:

  server_port:
    type: OS::Neutron::Port
    properties:
      fixed_ips: [{ subnet_id: { get_param: provider_subnet } }]
      network: { get_param: provider_net }
      security_groups: [{ get_param: security_group }]
{% if volumeUse %}
  cinder_volume:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: volume_size }
      volume_type: { get_param: volume_type }
{% endif %}

  init_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          params:
            $api_end_point: { get_param: api_end_point }
            $project_id: { get_param: 'OS::project_id' }
            $stack_id: { get_param: 'OS::stack_id' }
            $stack_name: { get_param: 'OS::stack_name' }
            $service_port: { get_param: service_port }
            $postgres_password: { get_param: postgres_password }
{% if createUser %}
            $create_user_id: { get_param: create_user_id }
            $create_user_password: { get_param: create_user_password }
            $create_db_name: { get_param: create_db_name }
{% endif %}
{% if volumeUse %}
            $volume_mount_point: { get_param: volume_mount_point }
            $volume_format_type: { get_param: volume_format_type}
            $volume_mount_path: { get_param: volume_mount_path }
{% endif %}
          template: |
            #!/bin/sh
            echo "postgresql setting start"
            curl -X PUT -H "Content-Type: application/json" --connect-timeout 10 --data "{\"deployStatus\": \"DEPLOY_IN_PROGRESS\"}" $api_end_point/vm_catalog/external/$project_id/deploy/$stack_name/$stack_id/status
{% if volumeUse %}
            mkfs.$volume_format_type $volume_mount_point
            mkdir -p $volume_mount_path
            mount -t $volume_format_type $volume_mount_point $volume_mount_path
            sleep 1

            chmod u+x /etc/rc.d/rc.local
            cat <<EOF>> /etc/rc.d/rc.local
            mount -t $volume_format_type $volume_mount_point $volume_mount_path
            EOF

            systemctl enable rc-local
            sleep 1

            mv /var/lib/pgsql/11/data $volume_mount_path/postgres
            ln -s $volume_mount_path/postgres /var/lib/pgsql/11/data
            sleep 1
{% endif %}
            /usr/pgsql-11/bin/postgresql-11-setup initdb
            sed -i 's/#port = 5432/port = $service_port/' /var/lib/pgsql/11/data/postgresql.conf
            sed -i "s/#listen_addresses = 'localhost'/listen_addresses = '*'/" /var/lib/pgsql/11/data/postgresql.conf

            systemctl start postgresql-11
            sleep 1
            sudo -u postgres psql <<EOF
            ALTER USER postgres WITH PASSWORD '$postgres_password';
{% if createUser %}
            CREATE USER $create_user_id PASSWORD '$create_user_password' SUPERUSER;
            CREATE DATABASE $create_db_name OWNER $create_user_id;
{% endif %}
            EOF

            cat <<EOF> /var/lib/pgsql/11/data/pg_hba.conf
            # TYPE  DATABASE        USER            ADDRESS                 METHOD
            # "local" is for Unix domain socket connections only
            local   all             all                                     md5
            # IPv4 local connections:
            host    all             all             0.0.0.0/0               md5
            host    all             all             127.0.0.1/32            md5
            # IPv6 local connections:
            host    all             all             ::1/128                 md5
            # replication privilege.
            local   replication     all                                     md5
            host    replication     all             127.0.0.1/32            md5
            host    replication     all             ::1/128                 md5
            EOF

            systemctl restart postgresql-11
            systemctl enable postgresql-11
            curl -X PUT -H "Content-Type: application/json" --connect-timeout 10 --data "{\"deployStatus\": \"DEPLOY_COMPLETE\"}" $api_end_point/vm_catalog/external/$project_id/deploy/$stack_name/$stack_id/status
            echo "postgresql setting end"

  server:
    type: OS::Nova::Server
    properties:
      flavor: { get_param: flavor }
      image: { get_param: image }
      availability_zone: { get_param: availability_zone }
      networks:
        - port: { get_resource: server_port }
      key_name: { get_param: key_name }
      user_data_update_policy: IGNORE
      user_data_format: RAW
      user_data:
        get_resource: init_config
{% if volumeUse %}
  cinder_volume_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      instance_uuid: { get_resource: server }
      volume_id: { get_resource: cinder_volume }
      mountpoint: { get_param: volume_mount_point }
{% endif %}

outputs:
  servers:
    value:
      - instance: { get_attr: [ server, show ] }
        instancePort: { get_attr: [ server_port, show ] }
{% if volumeUse %}
        volume: { get_attr: [ cinder_volume, show ] }
{% endif %}
