heat_template_version: '2018-08-31'

description: cluster Kafka volume template

parameters:
  api_end_point:
    type: string
  image:
    type: string
    default: CentOS-7-x86_64-Heat-1907-Kafka.qcow2
  flavor:
    type: string
  availability_zone:
    type: string
  key_name:
    type: string
  security_group:
    type: string
  provider_net:
    type: string
  provider_subnet:
    type: string
  zookeeper_port:
    type: string
    default: 2181
  service_port:
    type: string
    default: 9092

resources:

  server1_port:
    type: OS::Neutron::Port
    properties:
      fixed_ips: [{ subnet_id: { get_param: provider_subnet } }]
      network: { get_param: provider_net }
      security_groups: [{ get_param: security_group }]

  server2_port:
    type: OS::Neutron::Port
    properties:
      fixed_ips: [{ subnet_id: { get_param: provider_subnet } }]
      network: { get_param: provider_net }
      security_groups: [{ get_param: security_group }]

  server3_port:
    type: OS::Neutron::Port
    properties:
      fixed_ips: [{ subnet_id: { get_param: provider_subnet } }]
      network: { get_param: provider_net }
      security_groups: [{ get_param: security_group }]

  init_config1:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          params:
            $api_end_point: { get_param: api_end_point }
            $project_id: { get_param: 'OS::project_id' }
            $stack_id: { get_param: 'OS::stack_id' }
            $stack_name: { get_param: 'OS::stack_name' }
            $service_port: { get_param: service_port }
            $zookeeper_port: { get_param: zookeeper_port }
            $server1_ip_address: { get_attr: [server1_port, fixed_ips, 0, ip_address] }
            $server2_ip_address: { get_attr: [server2_port, fixed_ips, 0, ip_address] }
            $server3_ip_address: { get_attr: [server3_port, fixed_ips, 0, ip_address] }
            $server_addresses_and_ports:
              list_join:
                - ','
                - - list_join:
                      - ':'
                      - - { get_attr: [server1_port, fixed_ips, 0, ip_address] }
                      - - { get_param: zookeeper_port }
                - - list_join:
                      - ':'
                      - - { get_attr: [server2_port, fixed_ips, 0, ip_address] }
                      - - { get_param: zookeeper_port }
                - - list_join:
                      - ':'
                      - - { get_attr: [server3_port, fixed_ips, 0, ip_address] }
                      - - { get_param: zookeeper_port }
          template: |
            #!/bin/sh
            echo "kafka setting start"
            curl -X PUT -H "Content-Type: application/json" --connect-timeout 10 --data "{\"deployStatus\": \"DEPLOY_IN_PROGRESS\"}" $api_end_point/vm_catalog/external/$project_id/deploy/$stack_name/$stack_id/status

            cp /home/kafka/kafka/config/zookeeper.properties /home/kafka/kafka/config/zookeeper.properties.backup
            cp /home/kafka/kafka/config/server.properties /home/kafka/kafka/config/server.properties.backup

            sed -i "s/^clientPort=2181/clientPort=$zookeeper_port/" /home/kafka/kafka/config/zookeeper.properties
            cat <<EOF>> /home/kafka/kafka/config/zookeeper.properties

            initLimit=5
            syncLimit=3

            server.1=$server1_ip_address:2888:3888
            server.2=$server2_ip_address:2888:3888
            server.3=$server3_ip_address:2888:3888

            EOF

            mkdir /tmp/zookeeper
            echo 1 > /tmp/zookeeper/myid

            chown -R kafka.kafka /tmp/zookeeper

            sed -i "s/^broker.id=0/broker.id=1/" /home/kafka/kafka/config/server.properties
            sed -i "s/^#listeners=PLAINTEXT:\/\/:9092/listeners=PLAINTEXT:\/\/:$service_port/" /home/kafka/kafka/config/server.properties
            sed -i "s/^#advertised.listeners=PLAINTEXT:\/\/your.host.name:9092/advertised.listeners=PLAINTEXT:\/\/$server1_ip_address:$service_port/" /home/kafka/kafka/config/server.properties
            sed -i "s/^zookeeper.connect=localhost:2181/zookeeper.connect=$server_addresses_and_ports/" /home/kafka/kafka/config/server.properties

            systemctl start kafka
            systemctl enable kafka

            server3Run=1
            while [ $server3Run -ne 0 ]
            do
              echo "nc -z $server3_ip_address $service_port"
              nc -z $server3_ip_address $service_port
              server3Run=$?
              echo "nc -z $server3_ip_address $service_port > $server3Run"
              sleep 10
            done

            curl -X PUT -H "Content-Type: application/json" --connect-timeout 10 --data "{\"deployStatus\": \"DEPLOY_COMPLETE\"}" $api_end_point/vm_catalog/external/$project_id/deploy/$stack_name/$stack_id/status
            echo "kafka setting end"

  init_config2:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          params:
            $api_end_point: { get_param: api_end_point }
            $project_id: { get_param: 'OS::project_id' }
            $stack_id: { get_param: 'OS::stack_id' }
            $stack_name: { get_param: 'OS::stack_name' }
            $service_port: { get_param: service_port }
            $zookeeper_port: { get_param: zookeeper_port }
            $server1_ip_address: { get_attr: [server1_port, fixed_ips, 0, ip_address] }
            $server2_ip_address: { get_attr: [server2_port, fixed_ips, 0, ip_address] }
            $server3_ip_address: { get_attr: [server3_port, fixed_ips, 0, ip_address] }
            $server_addresses_and_ports:
              list_join:
                - ','
                - - list_join:
                      - ':'
                      - - { get_attr: [server1_port, fixed_ips, 0, ip_address] }
                      - - { get_param: zookeeper_port }
                - - list_join:
                      - ':'
                      - - { get_attr: [server2_port, fixed_ips, 0, ip_address] }
                      - - { get_param: zookeeper_port }
                - - list_join:
                      - ':'
                      - - { get_attr: [server3_port, fixed_ips, 0, ip_address] }
                      - - { get_param: zookeeper_port }
          template: |
            #!/bin/sh
            echo "kafka setting start"
            curl -X PUT -H "Content-Type: application/json" --connect-timeout 10 --data "{\"deployStatus\": \"DEPLOY_IN_PROGRESS\"}" $api_end_point/vm_catalog/external/$project_id/deploy/$stack_name/$stack_id/status

            cp /home/kafka/kafka/config/zookeeper.properties /home/kafka/kafka/config/zookeeper.properties.backup
            cp /home/kafka/kafka/config/server.properties /home/kafka/kafka/config/server.properties.backup

            sed -i "s/^clientPort=2181/clientPort=$zookeeper_port/" /home/kafka/kafka/config/zookeeper.properties
            cat <<EOF>> /home/kafka/kafka/config/zookeeper.properties

            initLimit=5
            syncLimit=3

            server.1=$server1_ip_address:2888:3888
            server.2=$server2_ip_address:2888:3888
            server.3=$server3_ip_address:2888:3888

            EOF

            mkdir /tmp/zookeeper
            echo 2 > /tmp/zookeeper/myid

            chown -R kafka.kafka /tmp/zookeeper

            sed -i "s/^broker.id=0/broker.id=2/" /home/kafka/kafka/config/server.properties
            sed -i "s/^#listeners=PLAINTEXT:\/\/:9092/listeners=PLAINTEXT:\/\/:$service_port/" /home/kafka/kafka/config/server.properties
            sed -i "s/^#advertised.listeners=PLAINTEXT:\/\/your.host.name:9092/advertised.listeners=PLAINTEXT:\/\/$server2_ip_address:$service_port/" /home/kafka/kafka/config/server.properties
            sed -i "s/^zookeeper.connect=localhost:2181/zookeeper.connect=$server_addresses_and_ports/" /home/kafka/kafka/config/server.properties

            systemctl start kafka
            systemctl enable kafka
            echo "kafka setting end"

  init_config3:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          params:
            $api_end_point: { get_param: api_end_point }
            $project_id: { get_param: 'OS::project_id' }
            $stack_id: { get_param: 'OS::stack_id' }
            $stack_name: { get_param: 'OS::stack_name' }
            $service_port: { get_param: service_port }
            $zookeeper_port: { get_param: zookeeper_port }
            $server1_ip_address: { get_attr: [server1_port, fixed_ips, 0, ip_address] }
            $server2_ip_address: { get_attr: [server2_port, fixed_ips, 0, ip_address] }
            $server3_ip_address: { get_attr: [server3_port, fixed_ips, 0, ip_address] }
            $server_addresses_and_ports:
              list_join:
                - ','
                - - list_join:
                      - ':'
                      - - { get_attr: [server1_port, fixed_ips, 0, ip_address] }
                      - - { get_param: zookeeper_port }
                - - list_join:
                      - ':'
                      - - { get_attr: [server2_port, fixed_ips, 0, ip_address] }
                      - - { get_param: zookeeper_port }
                - - list_join:
                      - ':'
                      - - { get_attr: [server3_port, fixed_ips, 0, ip_address] }
                      - - { get_param: zookeeper_port }
          template: |
            #!/bin/sh
            echo "kafka setting start"
            curl -X PUT -H "Content-Type: application/json" --connect-timeout 10 --data "{\"deployStatus\": \"DEPLOY_IN_PROGRESS\"}" $api_end_point/vm_catalog/external/$project_id/deploy/$stack_name/$stack_id/status

            cp /home/kafka/kafka/config/zookeeper.properties /home/kafka/kafka/config/zookeeper.properties.backup
            cp /home/kafka/kafka/config/server.properties /home/kafka/kafka/config/server.properties.backup

            sed -i "s/^clientPort=2181/clientPort=$zookeeper_port/" /home/kafka/kafka/config/zookeeper.properties
            cat <<EOF>> /home/kafka/kafka/config/zookeeper.properties

            initLimit=5
            syncLimit=3

            server.1=$server1_ip_address:2888:3888
            server.2=$server2_ip_address:2888:3888
            server.3=$server3_ip_address:2888:3888

            EOF

            mkdir /tmp/zookeeper
            echo 3 > /tmp/zookeeper/myid

            chown -R kafka.kafka /tmp/zookeeper

            sed -i "s/^broker.id=0/broker.id=3/" /home/kafka/kafka/config/server.properties
            sed -i "s/^#listeners=PLAINTEXT:\/\/:9092/listeners=PLAINTEXT:\/\/:$service_port/" /home/kafka/kafka/config/server.properties
            sed -i "s/^#advertised.listeners=PLAINTEXT:\/\/your.host.name:9092/advertised.listeners=PLAINTEXT:\/\/$server3_ip_address:$service_port/" /home/kafka/kafka/config/server.properties
            sed -i "s/^zookeeper.connect=localhost:2181/zookeeper.connect=$server_addresses_and_ports/" /home/kafka/kafka/config/server.properties

            systemctl start kafka
            systemctl enable kafka
            echo "kafka setting end"

  server1:
    type: OS::Nova::Server
    properties:
      flavor: { get_param: flavor }
      image: { get_param: image }
      availability_zone: { get_param: availability_zone }
      networks:
        - port: { get_resource: server1_port }
      key_name: { get_param: key_name }
      user_data_update_policy: IGNORE
      user_data_format: RAW
      user_data:
        get_resource: init_config1

  server2:
    type: OS::Nova::Server
    properties:
      flavor: { get_param: flavor }
      image: { get_param: image }
      availability_zone: { get_param: availability_zone }
      networks:
        - port: { get_resource: server2_port }
      key_name: { get_param: key_name }
      user_data_update_policy: IGNORE
      user_data_format: RAW
      user_data:
        get_resource: init_config2

  server3:
    type: OS::Nova::Server
    properties:
      flavor: { get_param: flavor }
      image: { get_param: image }
      availability_zone: { get_param: availability_zone }
      networks:
        - port: { get_resource: server3_port }
      key_name: { get_param: key_name }
      user_data_update_policy: IGNORE
      user_data_format: RAW
      user_data:
        get_resource: init_config3

outputs:
  servers:
    value:
      - instance: { get_attr: [ server1, show ] }
        instancePort: { get_attr: [ server1_port, show ] }
      - instance: { get_attr: [ server2, show ] }
        instancePort: { get_attr: [ server2_port, show ] }
      - instance: { get_attr: [ server3, show ] }
        instancePort: { get_attr: [ server3_port, show ] }
