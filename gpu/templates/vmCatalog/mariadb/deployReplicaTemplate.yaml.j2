heat_template_version: '2018-08-31'

description: mariadb replica volume template

parameters:
  api_end_point:
    type: string
  image:
    type: string
    default: CentOS-7-x86_64-Heat-1907-Mariadb.qcow2
  flavor:
    type: string
  availability_zone:
    type: string
  key_name:
    type: string
  security_group:
    type: string
  provider_net:
    type: string
  provider_subnet:
    type: string
  service_port:
    type: string
    default: 3306
  check_port:
    type: string
    default: 9898
  root_password:
    type: string
  repl_password:
    type: string
{% if createUser %}
  create_user_id:
    type: string
  create_user_password:
    type: string
  create_db_name:
    type: string
{% endif %}
{% if volumeUse %}
  volume_type:
    type: string
  volume_size:
    type: string
  volume_mount_point:
    type: string
    default: /dev/vdb
  volume_format_type:
    type: string
    default: xfs
  volume_mount_path:
    type: string
    default: /mnt/data
{% endif %}

resources:

  server1_port:
    type: OS::Neutron::Port
    properties:
      fixed_ips: [{ subnet_id: { get_param: provider_subnet } }]
      network: { get_param: provider_net }
      security_groups: [{ get_param: security_group }]

  server2_port:
    type: OS::Neutron::Port
    properties:
      fixed_ips: [{ subnet_id: { get_param: provider_subnet } }]
      network: { get_param: provider_net }
      security_groups: [{ get_param: security_group }]

{% if volumeUse %}
  cinder_volume1:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: volume_size }
      volume_type: { get_param: volume_type }

  cinder_volume2:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: volume_size }
      volume_type: { get_param: volume_type }
{% endif %}

  init_config1:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          params:
            $api_end_point: { get_param: api_end_point }
            $project_id: { get_param: 'OS::project_id' }
            $stack_id: { get_param: 'OS::stack_id' }
            $stack_name: { get_param: 'OS::stack_name' }
{% if volumeUse %}
            $volume_mount_point: { get_param: volume_mount_point }
            $volume_format_type: { get_param: volume_format_type}
            $volume_mount_path: { get_param: volume_mount_path }
{% endif %}
{% if createUser %}
            $create_user_id: { get_param: create_user_id }
            $create_user_password: { get_param: create_user_password }
            $create_db_name: { get_param: create_db_name }
{% endif %}
            $server1_ip_address: { get_attr: [server1_port, fixed_ips, 0, ip_address] }
            $server2_ip_address: { get_attr: [server2_port, fixed_ips, 0, ip_address] }
            $repl_password: { get_param: repl_password }
            $service_port: { get_param: service_port }
            $check_port: { get_param: check_port }
            $root_password: { get_param: root_password }
          template: |
            #!/bin/sh
            echo "master mariadb setting start"
            curl -X PUT -H "Content-Type: application/json" --connect-timeout 10 --data "{\"deployStatus\": \"DEPLOY_IN_PROGRESS\"}" $api_end_point/vm_catalog/external/$project_id/deploy/$stack_name/$stack_id/status
{% if volumeUse %}
            mkfs.$volume_format_type $volume_mount_point
            mkdir -p $volume_mount_path
            mount -t $volume_format_type $volume_mount_point $volume_mount_path
            sleep 1

            chmod u+x /etc/rc.d/rc.local
            cat <<EOF>> /etc/rc.d/rc.local
            mount -t $volume_format_type $volume_mount_point $volume_mount_path
            EOF

            systemctl enable rc-local

            sleep 1
            mv /var/lib/mysql $volume_mount_path/mysql
            ln -s $volume_mount_path/mysql /var/lib/mysql
            sleep 1
{% endif %}
            touch /var/log/mysqld.log
            chown mysql:mysql /var/log/mysqld.log

            sleep 1
            cp /etc/my.cnf.d/server.cnf /etc/my.cnf.d/server.cnf.backup
            cat <<EOF> /etc/my.cnf.d/server.cnf
            [server]

            [mysqld]
            port=$service_port
            log_bin=mysql-bin
            server_id=1
            datadir=/var/lib/mysql
            log-error=/var/log/mysqld.log
            log-basename=master1

            [galera]

            [embedded]

            [mariadb]

            [mariadb-10.4]

            EOF

            systemctl start mariadb.service
            echo "/usr/bin/mysqladmin -u root password '$root_password'"
            /usr/bin/mysqladmin -u root password '$root_password'

            mysql -u root -p$root_password <<EOF
            GRANT ALL PRIVILEGES ON *.* TO 'repl'@'$server2_ip_address' IDENTIFIED BY '$repl_password';
            GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'repl'@'$server2_ip_address' IDENTIFIED BY '$repl_password';

            FLUSH PRIVILEGES;
            EOF

            sleep 1
            nohup nc -kl $check_port 2>&1 &
            nc_pid=$!

            slaveRun=1
            while [ $slaveRun -ne 0 ]
            do
              echo "nc -z $server2_ip_address $service_port"
              nc -z $server2_ip_address $service_port
              slaveRun=$?
              echo "nc -z $server2_ip_address $service_port > $slaveRun"
              sleep 3
            done

            kill -9 $nc_pid
            sleep 3
{% if createUser %}
            mysql -u root -p$root_password <<EOF
            CREATE DATABASE $create_db_name CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
            GRANT ALL PRIVILEGES ON $create_db_name.* TO '$create_user_id'@'localhost' IDENTIFIED BY '$create_user_password';
            GRANT ALL PRIVILEGES ON $create_db_name.* TO '$create_user_id'@'%' IDENTIFIED BY '$create_user_password';

            FLUSH PRIVILEGES;
            EOF
{% endif %}
            sleep 5

            systemctl enable mariadb.service
            curl -X PUT -H "Content-Type: application/json" --connect-timeout 10 --data "{\"deployStatus\": \"DEPLOY_COMPLETE\"}" $api_end_point/vm_catalog/external/$project_id/deploy/$stack_name/$stack_id/status
            echo "master mariadb setting end"

  init_config2:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          params:
            $api_end_point: { get_param: api_end_point }
            $project_id: { get_param: 'OS::project_id' }
            $stack_id: { get_param: 'OS::stack_id' }
            $stack_name: { get_param: 'OS::stack_name' }
{% if volumeUse %}
            $volume_mount_point: { get_param: volume_mount_point }
            $volume_format_type: { get_param: volume_format_type }
            $volume_mount_path: { get_param: volume_mount_path }
{% endif %}
            $server1_ip_address: { get_attr: [server1_port, fixed_ips, 0, ip_address] }
            $server2_ip_address: { get_attr: [server2_port, fixed_ips, 0, ip_address] }
            $repl_password: { get_param: repl_password }
            $service_port: { get_param: service_port }
            $check_port: { get_param: check_port }
            $root_password: { get_param: root_password }
          template: |
            #!/bin/sh
            echo "slave mariadb setting start"
            curl -X PUT -H "Content-Type: application/json" --connect-timeout 10 --data "{\"deployStatus\": \"DEPLOY_IN_PROGRESS\"}" $api_end_point/vm_catalog/external/$project_id/deploy/$stack_name/$stack_id/status
{% if volumeUse %}
            mkfs.$volume_format_type $volume_mount_point
            mkdir -p $volume_mount_path
            mount -t $volume_format_type $volume_mount_point $volume_mount_path
            sleep 1

            chmod u+x /etc/rc.d/rc.local
            cat <<EOF>> /etc/rc.d/rc.local
            mount -t $volume_format_type $volume_mount_point $volume_mount_path
            EOF

            systemctl enable rc-local

            sleep 1
            mv /var/lib/mysql $volume_mount_path/mysql
            ln -s $volume_mount_path/mysql /var/lib/mysql
            sleep 1
{% endif %}
            masterRun=1
            while [ $masterRun -ne 0 ]
            do
              echo "nc -z $server1_ip_address $check_port"
              nc -z $server1_ip_address $check_port
              masterRun=$?
              echo "nc -z $server1_ip_address $check_port > $masterRun"
              sleep 3
            done
            sleep 3

            touch /var/log/mysqld.log
            chown mysql:mysql /var/log/mysqld.log
            sleep 1
            cp /etc/my.cnf.d/server.cnf /etc/my.cnf.d/server.cnf.backup
            cat <<EOF> /etc/my.cnf.d/server.cnf
            [server]

            [mysqld]
            port=$service_port
            server_id=2
            datadir=/var/lib/mysql
            log-error=/var/log/mysqld.log
            log-basename=master1
            read-only=1

            [galera]

            [embedded]

            [mariadb]

            [mariadb-10.4]

            EOF

            systemctl start mariadb.service
            echo "/usr/bin/mysqladmin -u root password '$root_password'"
            /usr/bin/mysqladmin -u root password '$root_password'

            sleep 1
            FileName=`mysql -h $server1_ip_address -u repl -p$repl_password --skip-column-names -e"SHOW MASTER STATUS;" |awk '{print $1}'`
            POS=`mysql -h $server1_ip_address -u repl -p$repl_password --skip-column-names -e"SHOW MASTER STATUS;" |awk '{print $2}'`

            sleep 1
            echo "CHANGE MASTER TO MASTER_HOST='$server1_ip_address', MASTER_USER='repl', MASTER_PASSWORD='$repl_password', MASTER_PORT=3306, MASTER_LOG_FILE='$FileName', MASTER_LOG_POS=$POS, MASTER_CONNECT_RETRY=10;"
            mysql -u root -p$root_password <<EOF
            CHANGE MASTER TO MASTER_HOST='$server1_ip_address', MASTER_USER='repl', MASTER_PASSWORD='$repl_password', MASTER_PORT=3306, MASTER_LOG_FILE='$FileName', MASTER_LOG_POS=$POS, MASTER_CONNECT_RETRY=10;
            START SLAVE;
            EOF

            sleep 10
            systemctl enable mariadb.service
            echo "slave mariadb setting end"

  server1:
    type: OS::Nova::Server
    properties:
      flavor: { get_param: flavor }
      image: { get_param: image }
      availability_zone: { get_param: availability_zone }
      networks:
        - port: { get_resource: server1_port }
      key_name: { get_param: key_name }
      user_data_update_policy: IGNORE
      user_data_format: RAW
      user_data:
        get_resource: init_config1

  server2:
    type: OS::Nova::Server
    properties:
      flavor: { get_param: flavor }
      image: { get_param: image }
      availability_zone: { get_param: availability_zone }
      networks:
        - port: { get_resource: server2_port }
      key_name: { get_param: key_name }
      user_data_update_policy: IGNORE
      user_data_format: RAW
      user_data:
        get_resource: init_config2

  cinder_volume1_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      instance_uuid: { get_resource: server1 }
      volume_id: { get_resource: cinder_volume1 }
      mountpoint: { get_param: volume_mount_point }

  cinder_volume2_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      instance_uuid: { get_resource: server2 }
      volume_id: { get_resource: cinder_volume2 }
      mountpoint: { get_param: volume_mount_point }

outputs:
  servers:
    value:
      - instance: { get_attr: [ server1, show ] }
        instancePort: { get_attr: [ server1_port, show ] }
{% if volumeUse %}
        volume: { get_attr: [ cinder_volume1, show ] }
{% endif %}
      - instance: { get_attr: [ server2, show ] }
        instancePort: { get_attr: [ server2_port, show ] }
{% if volumeUse %}
        volume: { get_attr: [ cinder_volume2, show ] }
{% endif %}
