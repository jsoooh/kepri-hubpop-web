heat_template_version: '2018-08-31'

description: single mongoDB volume template

parameters:
  api_end_point:
    type: string
  image:
    type: string
    default: CentOS-7-x86_64-Heat-1907-Mongodb.qcow2
  flavor:
    type: string
    default: m1.small
  availability_zone:
    type: string
    default: zone01
  key_name:
    type: string
    default: heat_stack_octavia_test_keypair
  security_group:
    type: string
    default: default
  provider_net:
    type: string
    default: provider01
  provider_subnet:
    type: string
    default: provider01-01
  service_port:
    type: string
    default: 271017
{% if volumeUse %}
  volume_type:
    type: string
    default: RBD
  volume_size:
    type: string
    default: 10
  volume_mount_point:
    type: string
    default: /dev/vdb
  volume_format_type:
    type: string
    default: xfs
  volume_mount_path:
    type: string
    default: /mnt/data
{% endif %}
  admin_id:
    type: string
  admin_password:
    type: string


resources:
  server_port:
    type: OS::Neutron::Port
    properties:
      fixed_ips: [{ subnet_id: { get_param: provider_subnet } }]
      network: { get_param: provider_net }
      security_groups: [{ get_param: security_group }]
{% if volumeUse %}
  cinder_volume:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: volume_size }
      volume_type: { get_param: volume_type }
{% endif %}

  init_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      outputs:
        - name: result
      config:
        str_replace:
          params:
            $api_end_point: { get_param: api_end_point }
            $project_id: { get_param: 'OS::project_id' }
            $stack_id: { get_param: 'OS::stack_id' }
            $stack_name: { get_param: 'OS::stack_name' }
{% if volumeUse %}
            $volume_mount_point: { get_param: volume_mount_point }
            $volume_format_type: { get_param: volume_format_type}
            $volume_mount_path: { get_param: volume_mount_path }
{% endif %}
            $service_port: { get_param: service_port }
            $admin_id: { get_param: admin_id }
            $admin_password: { get_param: admin_password }
          template: |
            #!/bin/sh
            echo "mongodb setting start"
            curl -X PUT -H "Content-Type: application/json" --connect-timeout 10 --data "{\"deployStatus\": \"DEPLOY_IN_PROGRESS\"}" $api_end_point/vm_catalog/external/$project_id/deploy/$stack_name/$stack_id/status
{% if volumeUse %}
            mkfs.$volume_format_type $volume_mount_point
            mkdir -p $volume_mount_path
            mount -t $volume_format_type $volume_mount_point $volume_mount_path
            sleep 1

            chmod u+x /etc/rc.d/rc.local
            cat <<EOF>> /etc/rc.d/rc.local
            mount -t $volume_format_type $volume_mount_point $volume_mount_path
            EOF

            systemctl enable rc-local

            sleep 1

            mv /var/lib/mongo $volume_mount_path/mongo
            ln -s $volume_mount_path/mongo /var/lib/mongo
            sleep 1
{% endif %}

            cp /etc/mongod.conf /etc/mongod.conf.backup
            sed -i 's/^  port: 20717/  port: $service_port/' /etc/mongod.conf
            sleep 1
            systemctl start mongod
            mongo << EOF
            use admin
            db.createUser({ user: "$admin_id", pwd: "$admin_password", roles: [ "root" ] })
            EOF
            systemctl restart mongod

            systemctl enable rc-local

            systemctl enable mongod
            echo "mongodb setting end"
            curl -X PUT -H "Content-Type: application/json" --connect-timeout 10 --data "{\"deployStatus\": \"DEPLOY_COMPLETE\"}" $api_end_point/vm_catalog/external/$project_id/deploy/$stack_name/$stack_id/status

  server:
    type: OS::Nova::Server
    properties:
      flavor: { get_param: flavor }
      image: { get_param: image }
      availability_zone: { get_param: availability_zone }
      networks:
        - port: { get_resource: server_port }
      key_name: { get_param: key_name }
      user_data_update_policy: IGNORE
      user_data_format: RAW
      user_data:
        get_resource: init_config
{% if volumeUse %}
  cinder_volume_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      instance_uuid: { get_resource: server }
      volume_id: { get_resource: cinder_volume }
      mountpoint: { get_param: volume_mount_point }
{% endif %}

outputs:
  servers:
    value:
      - instance: { get_attr: [ server, show ] }
        instancePort: { get_attr: [ server_port, show ] }
{% if volumeUse %}
        volume: { get_attr: [ cinder_volume, show ] }
{% endif %}
